name: CI/CD - FEAT / FIX / REFACTOR / PERF / REVERT / TEST
on:
    push:
        branches:
            - feat/*
            - fix/*
            - refactor/*
            - perf/*
            - revert/*
            - test/*
    pull_request:
        types: [synchronize]
    workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

env:
    NODE_VERSION: 18.17.1
    BASE_URL: ${{ secrets.BASE_URL }}
    PROJECT_NAME: '/prj--react-playground-typescript'

jobs:
    formats-check:
        name: 'Formats Check'
        runs-on: ubuntu-latest

        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: '游댢  Setup NodeJS ${{ env.NODE_VERSION }}'
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: '游댢 Install dependencies'
              run: yarn install

            - name: 'Format Check'
              run: yarn run formats:check

    test:
        name: 'Automated Tests'
        runs-on: ubuntu-latest

        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: '游댌  Verify Changed Files [shared, backend, database, frontend]'
              uses: tj-actions/changed-files@v35
              id: changed-test-files
              with:
                  files: |
                      shared/**/*
                      backend/**/*
                      database/**/*
                      frontend/**/*

            - name: List all changed files
              run: |
                  for file in ${{ steps.changed-test-files.outputs.all_changed_files }}; do
                    echo "$file was changed"
                  done

            - name: '游댢  Setup NodeJS ${{ env.NODE_VERSION }}'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: '游댢 Install dependencies'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn install

            - name: 'Run Tests'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn run test

            - name: 'Package ./coverage'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn run package

            - name: 'Upload coverage artifact'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/upload-artifact@v3
              with:
                  name: coverage-${{ github.run_number }}-${{ github.run_id }}
                  path: './package/coverage/'

    vrt-chromatic:
        name: 'Visual Regression Testing w. Chromatic'
        runs-on: ubuntu-latest
        needs: [test, formats-check]
        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: '游댌  Verify Changed Files [shared, frontend]'
              uses: tj-actions/changed-files@v35
              id: changed-test-files
              with:
                  files: |
                      shared/**/*
                      frontend/**/*

            - name: '游댢  Setup NodeJS ${{ env.NODE_VERSION }}'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: '游댢 Install dependencies'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn install

            - name: 'Compile Styles'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: |
                  yarn run build:cmp
                  yarn run build:styles

            - name: '游깯 Run VRT w. Chromatic'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              env:
                  CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
              run: yarn test:chromatic

            - name: 'Package ./storybook'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn run package

            - name: 'Upload apps artifact'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/upload-artifact@v3
              with:
                  name: storybook-${{ github.run_number }}-${{ github.run_id }}
                  path: './package/storybook/'

            - name: 'Set VRT flag'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: echo "VRT=true" >> $GITHUB_OUTPUT

    build-n-package:
        name: 'Build & Package'
        runs-on: ubuntu-latest
        needs: [vrt-chromatic]
        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: '游댌  Verify Changed Files [shared, backend, database, frontend, assets]'
              uses: tj-actions/changed-files@v35
              id: changed-test-files
              with:
                  files: |
                      shared/**/*
                      frontend/**/*
                      assets/**/*
                      backend/**/*
                      database/**/*

            - name: '游댢  Setup NodeJS ${{ env.NODE_VERSION }}'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: '游댢 Install dependencies'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn install

            - name: 'Run Build'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn run build:prod

            - name: 'Package ./apps'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: yarn run package

            - name: 'Upload apps artifact'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              uses: actions/upload-artifact@v3
              with:
                  name: apps-${{ github.run_number }}-${{ github.run_id }}
                  path: './package/apps/'

            - name: 'Set Build flag'
              if: steps.changed-test-files.outputs.any_changed == 'true'
              run: echo "BUILD=true" >> $GITHUB_OUTPUT

    deploy-dev:
        name: 'Deploy to AWS DEV env.'
        runs-on: ubuntu-latest
        needs: [vrt-chromatic, build-n-package]
        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: '游댌  Verify Changed Files [shared, backend, database, frontend, assets]'
              uses: tj-actions/changed-files@v35
              id: changed-test-files
              with:
                  files: |
                      shared/**/*
                      frontend/**/*
                      assets/**/*
                      backend/**/*
                      database/**/*

            - name: 'Create package/dist'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.BUILD }} == 'true'
              run: mkdir -p package/apps

            - uses: actions/download-artifact@v3
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.BUILD }} == 'true'
              with:
                  name: apps-${{ github.run_number }}-${{ github.run_id }}
                  path: package/apps

            - name: 'Configure AWS Credentials'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.BUILD }} == 'true'
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.S3_BUCKET_REGION }}

            - name: 'Deploy to bucket'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.BUILD }} == 'true'
              run: aws s3 sync ./package/apps/ s3://${{ secrets.S3_DEVELOP_BUCKET }}${{ env.PROJECT_NAME }}/apps --delete

            - name: 'Set Flush CDN Cache flag'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.BUILD }} == 'true'
              run: echo "FLUSH_CDN_CACHE=true" >> $GITHUB_OUTPUT

    deploy-storybook-dev:
        name: 'Deploy Storybook to AWS DEV env.'
        runs-on: ubuntu-latest
        needs: [vrt-chromatic]
        steps:
            - name: '游닌 checkout repository'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: '游댌  Verify Changed Files [shared, backend, database, frontend, assets]'
              uses: tj-actions/changed-files@v35
              id: changed-test-files
              with:
                  files: |
                      shared/**/*
                      frontend/**/*
                      assets/**/*
                      backend/**/*
                      database/**/*

            - name: 'Create package/storybook'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.VRT }} == 'true'
              run: mkdir -p package/storybook

            - uses: actions/download-artifact@v3
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.VRT }} == 'true'
              with:
                  name: storybook-${{ github.run_number }}-${{ github.run_id }}
                  path: package/storybook

            - name: 'Configure AWS Credentials'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.VRT }} == 'true'
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.S3_BUCKET_REGION }}

            - name: 'Deploy  to bucket'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.VRT }} == 'true'
              run: aws s3 sync ./package/storybook/ s3://${{ secrets.S3_DEVELOP_BUCKET }}${{ env.PROJECT_NAME }}/storybook --delete

            - name: 'Set Flush CDN Cache flag'
              if: steps.changed-test-files.outputs.any_changed == 'true' && ${{ steps.random-color-generator.outputs.VRT }} == 'true'
              run: echo "FLUSH_CDN_CACHE=true" >> $GITHUB_OUTPUT

    flush-cdn-cache:
        name: 'Flush CDN Cache'
        runs-on: ubuntu-latest
        needs: [deploy-dev, deploy-storybook-dev]
        steps:
            - name: 'Configure AWS Credentials'
              if: ${{ steps.random-color-generator.outputs.FLUSH_CDN_CACHE }} == 'true'
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.S3_BUCKET_REGION }}

            - name: 'Invalidate  cloudfront'
              if: ${{ steps.random-color-generator.outputs.FLUSH_CDN_CACHE }} == 'true'
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DEVELOP_DISTRIBUTION_ID }} --paths "${{ env.PROJECT_NAME }}/*"
